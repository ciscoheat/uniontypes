// Generated by Haxe 4.1.3
(function ($hx_exports, $global) { "use strict";
$hx_exports["promhx"] = $hx_exports["promhx"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var AsyncTools = function() { };
AsyncTools.__name__ = "AsyncTools";
AsyncTools.aMapLimit = function(iterable,limit,cb,done) {
	AsyncTools.aForEachOfMapLimit(iterable,limit,function(item,_,done) {
		cb(item,done);
	},done);
};
AsyncTools.aMapSeries = function(iterable,cb,done) {
	AsyncTools.aMapLimit(iterable,1,cb,done);
};
AsyncTools.aEachLimit = function(iterable,limit,cb,done) {
	AsyncTools.aMapLimit(iterable,limit,function(item,done) {
		cb(item,function(err) {
			done(err,true);
		});
	},function(err,items) {
		done(err);
	});
};
AsyncTools.aEachSeries = function(iterable,cb,done) {
	AsyncTools.aEachLimit(iterable,1,cb,done);
};
AsyncTools.aForEachOfMapLimit = function(iterable,limit,cb,done) {
	var complete_h = { };
	var it = $getIterator(iterable);
	var completed = false;
	var running = 0;
	var pos = 0;
	var completedItems = function() {
		var currentPos = pos;
		var _g = [];
		var _g1 = 0;
		var _g2 = currentPos;
		while(_g1 < _g2) {
			var key = _g1++;
			_g.push(complete_h[key]);
		}
		var output = _g;
		return output;
	};
	var next = null;
	next = function() {
		if(!completed) {
			if(!it.hasNext()) {
				if(running <= 0) {
					if(!completed) {
						completed = true;
						done(null,completedItems());
					}
				}
			} else {
				var nextItem = it.next();
				pos += 1;
				var currentPos = pos - 1;
				running += 1;
				cb(nextItem,currentPos,function(err,mapped) {
					if(!completed) {
						if(err != null) {
							if(!completed) {
								completed = true;
								done(err,completedItems());
							}
						} else {
							running -= 1;
							complete_h[currentPos] = mapped;
							next();
						}
					}
				});
				if(!completed) {
					if(limit == 0 || running < limit) {
						next();
					}
				}
			}
		}
	};
	next();
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
Lambda.exists = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			return true;
		}
	}
	return false;
};
Lambda.iter = function(it,f) {
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		f(x1);
	}
};
Lambda.filter = function(it,f) {
	var _g = [];
	var x = $getIterator(it);
	while(x.hasNext()) {
		var x1 = x.next();
		if(f(x1)) {
			_g.push(x1);
		}
	}
	return _g;
};
Lambda.empty = function(it) {
	return !$getIterator(it).hasNext();
};
Math.__name__ = "Math";
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
var buddy_BuddySuite = function() {
	this.timeoutMs = 5000;
	this.suite = this.currentSuite = new buddy_TestSuite("");
	this.describeQueue = [];
};
buddy_BuddySuite.__name__ = "buddy.BuddySuite";
buddy_BuddySuite.prototype = {
	describe: function(description,spec,_hasInclude) {
		if(_hasInclude == null) {
			_hasInclude = false;
		}
		var suite = new buddy_TestSuite(description);
		this.currentSuite.specs.add(buddy_TestSpec.Describe(suite,_hasInclude));
		this.describeQueue.push({ suite : suite, spec : spec});
	}
	,it: function(desc,spec,_hasInclude,pos,time) {
		if(time == null) {
			time = 0;
		}
		if(_hasInclude == null) {
			_hasInclude = false;
		}
		if(this.currentSuite == this.suite) {
			throw haxe_Exception.thrown("Cannot use 'it' outside of a describe block.");
		}
		this.currentSuite.specs.add(buddy_TestSpec.It(desc,spec,_hasInclude,pos,time));
	}
	,__class__: buddy_BuddySuite
};
var buddy_SingleSuite = function() {
	buddy_BuddySuite.call(this);
};
buddy_SingleSuite.__name__ = "buddy.SingleSuite";
buddy_SingleSuite.__super__ = buddy_BuddySuite;
buddy_SingleSuite.prototype = $extend(buddy_BuddySuite.prototype,{
	__class__: buddy_SingleSuite
});
var Tests = function() {
	var _gthis = this;
	buddy_SingleSuite.call(this);
	this.describe("Uniontypes",buddy_TestFunc.Sync(function() {
		var tmp = buddy_TestFunc.Sync(function() {
			var x = null;
			buddy_ShouldEnum.should(UnionClass.type(x)).equal(UnionClassType.Null,{ fileName : "tests/Tests.hx", lineNumber : 14, className : "Tests", methodName : "new"});
			var x = "string";
			buddy_ShouldEnum.should(UnionClass.type(x)).equal(UnionClassType.String("string"),{ fileName : "tests/Tests.hx", lineNumber : 17, className : "Tests", methodName : "new"});
			var x = 123;
			buddy_ShouldEnum.should(UnionClass.type(x)).equal(UnionClassType.Integer(123),{ fileName : "tests/Tests.hx", lineNumber : 20, className : "Tests", methodName : "new"});
			var date = new Date();
			var x = date;
			buddy_ShouldEnum.should(UnionClass.type(x)).equal(UnionClassType.Date(date),{ fileName : "tests/Tests.hx", lineNumber : 24, className : "Tests", methodName : "new"});
			var x = true;
			buddy_ShouldEnum.should(UnionClass.type(x)).equal(UnionClassType.Boolean(true),{ fileName : "tests/Tests.hx", lineNumber : 27, className : "Tests", methodName : "new"});
			var x = 123.45;
			buddy_ShouldEnum.should(UnionClass.type(x)).equal(UnionClassType.Floating(123.45),{ fileName : "tests/Tests.hx", lineNumber : 30, className : "Tests", methodName : "new"});
		});
		_gthis.it("should work with basic types according to the example",tmp,null,{ fileName : "tests/Tests.hx", lineNumber : 12, className : "Tests", methodName : "new"});
	}));
};
Tests.__name__ = "Tests";
Tests.main = function() {
	var testsDone = false;
	var runner = new buddy_SuitesRunner([new Tests()],new buddy_reporting_ConsoleColorReporter());
	var oldTrace = haxe_Log.trace;
	var outputError = function() {
		haxe_Log.trace = oldTrace;
		var pos = { fileName : "Buddy", lineNumber : 0, className : "", methodName : ""};
		haxe_Log.trace(runner.unrecoverableError,pos);
		var stack = runner.unrecoverableErrorStack;
		if(stack == null || stack.length == 0) {
			return;
		}
		var _g = 0;
		while(_g < stack.length) {
			var s = stack[_g];
			++_g;
			if(s._hx_index == 2) {
				var _g1 = s.column;
				var _g2 = s.s;
				var line = s.line;
				var file = s.file;
				if(line > 0) {
					haxe_Log.trace(file + ":" + line,pos);
				}
			}
		}
	};
	var startRun = function(done) {
		var r = runner.run();
		r.then(function(_) {
			if(runner.unrecoverableError != null) {
				outputError();
			}
			done();
		});
	};
	process.on("uncaughtException",function(err) {
		runner.haveUnrecoverableError(err);
	});
	startRun(function() {
		process.exit(runner.statusCode());
	});
};
Tests.__super__ = buddy_SingleSuite;
Tests.prototype = $extend(buddy_SingleSuite.prototype,{
	__class__: Tests
});
var Type = function() { };
Type.__name__ = "Type";
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
var UnionClassType = $hxEnums["UnionClassType"] = { __ename__ : true, __constructs__ : ["Null","String","Integer","Date","Boolean","Floating"]
	,Null: {_hx_index:0,__enum__:"UnionClassType",toString:$estr}
	,String: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"UnionClassType",toString:$estr}; },$_.__params__ = ["s"],$_)
	,Integer: ($_=function(i) { return {_hx_index:2,i:i,__enum__:"UnionClassType",toString:$estr}; },$_.__params__ = ["i"],$_)
	,Date: ($_=function(d) { return {_hx_index:3,d:d,__enum__:"UnionClassType",toString:$estr}; },$_.__params__ = ["d"],$_)
	,Boolean: ($_=function(b) { return {_hx_index:4,b:b,__enum__:"UnionClassType",toString:$estr}; },$_.__params__ = ["b"],$_)
	,Floating: ($_=function(f) { return {_hx_index:5,f:f,__enum__:"UnionClassType",toString:$estr}; },$_.__params__ = ["f"],$_)
};
var UnionClass = {};
UnionClass.type = function(this1) {
	if(this1 == null) {
		return UnionClassType.Null;
	} else if(typeof(this1) == "string") {
		return UnionClassType.String(this1);
	} else if(((this1) instanceof Date)) {
		return UnionClassType.Date(this1);
	} else if(typeof(this1) == "boolean") {
		return UnionClassType.Boolean(this1);
	} else if(typeof(this1) == "number" && ((this1 | 0) === this1)) {
		return UnionClassType.Integer(this1);
	} else {
		return UnionClassType.Floating(this1);
	}
};
var buddy_SpecStatus = $hxEnums["buddy.SpecStatus"] = { __ename__ : true, __constructs__ : ["Unknown","Passed","Pending","Failed"]
	,Unknown: {_hx_index:0,__enum__:"buddy.SpecStatus",toString:$estr}
	,Passed: {_hx_index:1,__enum__:"buddy.SpecStatus",toString:$estr}
	,Pending: {_hx_index:2,__enum__:"buddy.SpecStatus",toString:$estr}
	,Failed: {_hx_index:3,__enum__:"buddy.SpecStatus",toString:$estr}
};
var buddy_Step = $hxEnums["buddy.Step"] = { __ename__ : true, __constructs__ : ["TSuite","TSpec"]
	,TSuite: ($_=function(s) { return {_hx_index:0,s:s,__enum__:"buddy.Step",toString:$estr}; },$_.__params__ = ["s"],$_)
	,TSpec: ($_=function(s) { return {_hx_index:1,s:s,__enum__:"buddy.Step",toString:$estr}; },$_.__params__ = ["s"],$_)
};
var buddy_Suite = function(description) {
	this.stack = [];
	this.steps = [];
	if(description == null) {
		throw haxe_Exception.thrown("Suite requires a description.");
	}
	this.description = description;
};
buddy_Suite.__name__ = "buddy.Suite";
buddy_Suite.prototype = {
	get_specs: function() {
		var output = [];
		var _g = 0;
		var _g1 = this.steps;
		while(_g < _g1.length) {
			var step = _g1[_g];
			++_g;
			if(step._hx_index == 1) {
				var s = step.s;
				output.push(s);
			}
		}
		return output;
	}
	,get_suites: function() {
		var output = [];
		var _g = 0;
		var _g1 = this.steps;
		while(_g < _g1.length) {
			var step = _g1[_g];
			++_g;
			if(step._hx_index == 0) {
				var s = step.s;
				output.push(s);
			}
		}
		return output;
	}
	,passed: function() {
		if(Lambda.exists(this.get_specs(),function(spec) {
			return spec.status == buddy_SpecStatus.Failed;
		})) {
			return false;
		}
		return !Lambda.exists(this.get_suites(),function(suite) {
			return !suite.passed();
		});
	}
	,__class__: buddy_Suite
};
var buddy_Spec = function(description,fileName) {
	this.time = 0;
	this.fileName = "";
	this.traces = [];
	this.failures = [];
	this.status = buddy_SpecStatus.Unknown;
	if(description == null) {
		throw haxe_Exception.thrown("Spec must have a description.");
	}
	this.description = description;
	this.fileName = fileName;
};
buddy_Spec.__name__ = "buddy.Spec";
buddy_Spec.prototype = {
	__class__: buddy_Spec
};
var buddy_Failure = function(error,stack) {
	if(error == null) {
		throw haxe_Exception.thrown("Failure must have an error.");
	}
	this.error = error;
	this.stack = stack == null ? [] : stack;
};
buddy_Failure.__name__ = "buddy.Failure";
buddy_Failure.prototype = {
	__class__: buddy_Failure
};
var buddy_TestFunc = $hxEnums["buddy.TestFunc"] = { __ename__ : true, __constructs__ : ["Async","Sync"]
	,Async: ($_=function(f) { return {_hx_index:0,f:f,__enum__:"buddy.TestFunc",toString:$estr}; },$_.__params__ = ["f"],$_)
	,Sync: ($_=function(f) { return {_hx_index:1,f:f,__enum__:"buddy.TestFunc",toString:$estr}; },$_.__params__ = ["f"],$_)
};
var buddy_TestSpec = $hxEnums["buddy.TestSpec"] = { __ename__ : true, __constructs__ : ["Describe","It"]
	,Describe: ($_=function(suite,included) { return {_hx_index:0,suite:suite,included:included,__enum__:"buddy.TestSpec",toString:$estr}; },$_.__params__ = ["suite","included"],$_)
	,It: ($_=function(description,test,included,pos,time) { return {_hx_index:1,description:description,test:test,included:included,pos:pos,time:time,__enum__:"buddy.TestSpec",toString:$estr}; },$_.__params__ = ["description","test","included","pos","time"],$_)
};
var buddy_TestSuite = function(description) {
	this.afterAll = new haxe_ds_List();
	this.afterEach = new haxe_ds_List();
	this.specs = new haxe_ds_List();
	this.beforeEach = new haxe_ds_List();
	this.beforeAll = new haxe_ds_List();
	if(description == null) {
		throw haxe_Exception.thrown("TestSuite must have a description. Can be empty.");
	}
	this.description = description;
};
buddy_TestSuite.__name__ = "buddy.TestSuite";
buddy_TestSuite.prototype = {
	__class__: buddy_TestSuite
};
var buddy_Should = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	this.value = value;
	this.inverse = inverse;
};
buddy_Should.__name__ = "buddy.Should";
buddy_Should.prototype = {
	be: function(expected,p) {
		var result = this.value == expected;
		this.test(result,p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(expected) + " but was equal to that");
	}
	,beType: function(type,p) {
		this.test(js_Boot.__instanceof(this.value,type),p,"Expected " + this.quote(this.value) + " to be type " + this.quote(type),"Expected " + this.quote(this.value) + " not to be type " + this.quote(type));
	}
	,quote: function(v) {
		if(typeof(v) == "string") {
			return "\"" + Std.string(v) + "\"";
		}
		if(((v) instanceof haxe_ds_List)) {
			return Std.string(Lambda.array(v));
		}
		return Std.string(v);
	}
	,fail: function(error,errorInverted,p) {
		var tmp = this.inverse ? errorInverted : error;
		var tmp1 = buddy_SuitesRunner.posInfosToStack(p);
		buddy_SuitesRunner.currentTest(false,tmp,tmp1);
	}
	,test: function(expr,p,error,errorInverted) {
		if(buddy_SuitesRunner.currentTest == null) {
			throw haxe_Exception.thrown("SuitesRunner.currentTest was null");
		}
		if(!this.inverse) {
			var tmp = buddy_SuitesRunner.posInfosToStack(p);
			buddy_SuitesRunner.currentTest(expr,error,tmp);
		} else {
			var tmp = buddy_SuitesRunner.posInfosToStack(p);
			buddy_SuitesRunner.currentTest(!expr,errorInverted,tmp);
		}
	}
	,__class__: buddy_Should
};
var buddy_ShouldDynamic = function(value,inverse) {
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldDynamic.__name__ = "buddy.ShouldDynamic";
buddy_ShouldDynamic.should = function(d) {
	return new buddy_ShouldDynamic(d);
};
buddy_ShouldDynamic.__super__ = buddy_Should;
buddy_ShouldDynamic.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldDynamic(this.value,!this.inverse);
	}
	,__class__: buddy_ShouldDynamic
});
var buddy_ShouldEnum = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldEnum.__name__ = "buddy.ShouldEnum";
buddy_ShouldEnum.should = function(e) {
	return new buddy_ShouldEnum(e);
};
buddy_ShouldEnum.__super__ = buddy_Should;
buddy_ShouldEnum.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldEnum(this.value,!this.inverse);
	}
	,be: function(expected,p) {
		this.equal(expected,p);
	}
	,equal: function(expected,p) {
		this.test(Type.enumEq(this.value,expected),p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(this.value) + " but was equal to that");
	}
	,__class__: buddy_ShouldEnum
});
var buddy_ShouldInt = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldInt.__name__ = "buddy.ShouldInt";
buddy_ShouldInt.should = function(i) {
	return new buddy_ShouldInt(i);
};
buddy_ShouldInt.__super__ = buddy_Should;
buddy_ShouldInt.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldInt(this.value,!this.inverse);
	}
	,beLessThan: function(expected,p) {
		this.test(this.value < expected,p,"Expected less than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThan: function(expected,p) {
		this.test(this.value > expected,p,"Expected greater than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,__class__: buddy_ShouldInt
});
var buddy_ShouldInt64 = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldInt64.__name__ = "buddy.ShouldInt64";
buddy_ShouldInt64.should = function(i) {
	return new buddy_ShouldInt64(i);
};
buddy_ShouldInt64.__super__ = buddy_Should;
buddy_ShouldInt64.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldInt64(this.value,!this.inverse);
	}
	,be: function(expected,p) {
		var b = this.value;
		var v = expected.high - b.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(expected.low,b.low);
		}
		var result = (expected.high < 0 ? b.high < 0 ? v : -1 : b.high >= 0 ? v : 1) == 0;
		this.test(result,p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(expected) + " but was equal to that");
	}
	,beLessThan: function(expected,p) {
		var a = this.value;
		var v = a.high - expected.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,expected.low);
		}
		this.test((a.high < 0 ? expected.high < 0 ? v : -1 : expected.high >= 0 ? v : 1) < 0,p,"Expected less than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThan: function(expected,p) {
		var a = this.value;
		var v = a.high - expected.high | 0;
		if(v == 0) {
			v = haxe_Int32.ucompare(a.low,expected.low);
		}
		this.test((a.high < 0 ? expected.high < 0 ? v : -1 : expected.high >= 0 ? v : 1) > 0,p,"Expected greater than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,__class__: buddy_ShouldInt64
});
var buddy_ShouldFloat = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldFloat.__name__ = "buddy.ShouldFloat";
buddy_ShouldFloat.should = function(i) {
	return new buddy_ShouldFloat(i);
};
buddy_ShouldFloat.__super__ = buddy_Should;
buddy_ShouldFloat.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldFloat(this.value,!this.inverse);
	}
	,beLessThan: function(expected,p) {
		this.test(this.value < expected,p,"Expected less than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not less than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beGreaterThan: function(expected,p) {
		this.test(this.value > expected,p,"Expected greater than " + this.quote(expected) + ", was " + this.quote(this.value),"Expected not greater than " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beCloseTo: function(expected,precision,p) {
		if(precision == null) {
			precision = 2;
		}
		var diff = Math.abs(expected - this.value);
		var threshold = Math.pow(10,-precision) / 2;
		var expr = diff < threshold;
		this.test(expr,p,"Expected close to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected " + this.quote(this.value) + " not to be close to " + this.quote(expected));
	}
	,__class__: buddy_ShouldFloat
});
var buddy_ShouldDate = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldDate.__name__ = "buddy.ShouldDate";
buddy_ShouldDate.should = function(i) {
	return new buddy_ShouldDate(i);
};
buddy_ShouldDate.__super__ = buddy_Should;
buddy_ShouldDate.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldDate(this.value,!this.inverse);
	}
	,beOn: function(expected,p) {
		this.test(this.value.getTime() == expected.getTime(),p,"Expected date equal to " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not equal to " + this.quote(expected));
	}
	,beBefore: function(expected,p) {
		this.test(this.value.getTime() < expected.getTime(),p,"Expected date before " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not before " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beAfter: function(expected,p) {
		this.test(this.value.getTime() > expected.getTime(),p,"Expected date after " + this.quote(expected) + ", was " + this.quote(this.value),"Expected date not after " + this.quote(expected) + ", was " + this.quote(this.value));
	}
	,beOnStr: function(expected,p) {
		this.beOn(HxOverrides.strDate(expected),p);
	}
	,beBeforeStr: function(expected,p) {
		this.beBefore(HxOverrides.strDate(expected),p);
	}
	,beAfterStr: function(expected,p) {
		this.beAfter(HxOverrides.strDate(expected),p);
	}
	,__class__: buddy_ShouldDate
});
var buddy_ShouldIterable = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldIterable.__name__ = "buddy.ShouldIterable";
buddy_ShouldIterable.should = function(value) {
	return new buddy_ShouldIterable(value);
};
buddy_ShouldIterable.__super__ = buddy_Should;
buddy_ShouldIterable.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldIterable(this.value,!this.inverse);
	}
	,contain: function(o,p) {
		this.test(Lambda.exists(this.value,function(el) {
			return el == o;
		}),p,"Expected " + this.quote(this.value) + " to contain " + this.quote(o),"Expected " + this.quote(this.value) + " not to contain " + this.quote(o));
	}
	,containAll: function(values,p) {
		var expr = true;
		var a = $getIterator(values);
		while(a.hasNext()) {
			var a1 = a.next();
			var a2 = [a1];
			if(!Lambda.exists(this.value,(function(a) {
				return function(v) {
					return v == a[0];
				};
			})(a2))) {
				expr = false;
				break;
			}
		}
		this.test(expr,p,"Expected " + this.quote(this.value) + " to contain all of " + this.quote(values),"Expected " + this.quote(this.value) + " not to contain all of " + this.quote(values));
	}
	,containExactly: function(values,p) {
		var a = $getIterator(this.value);
		var b = $getIterator(values);
		var expr = true;
		while(a.hasNext() || b.hasNext()) if(a.next() != b.next()) {
			expr = false;
			break;
		}
		this.test(expr,p,"Expected " + this.quote(this.value) + " to contain exactly " + this.quote(values),"Expected " + this.quote(this.value) + " not to contain exactly " + this.quote(values));
	}
	,__class__: buddy_ShouldIterable
});
var buddy_ShouldString = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	buddy_Should.call(this,value,inverse);
};
buddy_ShouldString.__name__ = "buddy.ShouldString";
buddy_ShouldString.should = function(str) {
	return new buddy_ShouldString(str);
};
buddy_ShouldString.__super__ = buddy_Should;
buddy_ShouldString.prototype = $extend(buddy_Should.prototype,{
	get_not: function() {
		return new buddy_ShouldString(this.value,!this.inverse);
	}
	,contain: function(substring,p) {
		if(this.value == null) {
			this.fail("Expected string to contain " + this.quote(substring) + " but string was null","Expected string not to contain " + this.quote(substring) + " but string was null",p);
			return;
		}
		this.test(this.value.indexOf(substring) >= 0,p,"Expected " + this.quote(this.value) + " to contain " + this.quote(substring),"Expected " + this.quote(this.value) + " not to contain " + this.quote(substring));
	}
	,startWith: function(substring,p) {
		if(this.value == null) {
			this.fail("Expected string to start with " + this.quote(substring) + " but string was null","Expected string not to start with " + this.quote(substring) + " but string was null",p);
			return;
		}
		this.test(StringTools.startsWith(this.value,substring),p,"Expected " + this.quote(this.value) + " to start with " + this.quote(substring),"Expected " + this.quote(this.value) + " not to start with " + this.quote(substring));
	}
	,endWith: function(substring,p) {
		if(this.value == null) {
			this.fail("Expected string to end with " + this.quote(substring) + " but string was null","Expected string not to end with " + this.quote(substring) + " but string was null",p);
			return;
		}
		this.test(StringTools.endsWith(this.value,substring),p,"Expected " + this.quote(this.value) + " to end with " + this.quote(substring),"Expected " + this.quote(this.value) + " not to end with " + this.quote(substring));
	}
	,match: function(regexp,p) {
		if(this.value == null) {
			this.fail("Expected string to match regular expression but string was null","Expected string not to match regular expression but string was null",p);
			return;
		}
		this.test(regexp.match(this.value),p,"Expected " + this.quote(this.value) + " to match regular expression","Expected " + this.quote(this.value) + " not to match regular expression");
	}
	,__class__: buddy_ShouldString
});
var buddy_ShouldFunctions = function(value,inverse) {
	if(inverse == null) {
		inverse = false;
	}
	this.value = value;
	this.inverse = inverse;
};
buddy_ShouldFunctions.__name__ = "buddy.ShouldFunctions";
buddy_ShouldFunctions.should = function(value) {
	return new buddy_ShouldFunctions(value);
};
buddy_ShouldFunctions.prototype = {
	get_not: function() {
		return new buddy_ShouldFunctions(this.value,!this.inverse);
	}
	,throwAnything: function(p) {
		var caught = false;
		var exception = null;
		try {
			this.value();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			exception = e;
			caught = true;
		}
		this.test(caught,p,"Expected " + this.quote(this.value) + " to throw anything, nothing was thrown","Expected " + this.quote(this.value) + " not to throw anything, " + this.quote(exception) + " was thrown");
		return exception;
	}
	,throwValue: function(v,p) {
		var exception = null;
		try {
			this.value();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			var cause = null;
			exception = cause == null ? e : cause;
		}
		var isCaught = exception == v;
		this.test(isCaught,p,"Expected " + this.quote(this.value) + " to throw " + this.quote(v),"Expected " + this.quote(this.value) + " not to throw " + this.quote(v));
		return exception;
	}
	,throwType: function(type,p) {
		var exception = null;
		try {
			this.value();
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			var cause = null;
			exception = cause == null ? e : cause;
		}
		var typeName = type.__name__;
		var exceptionName;
		if(exception == null) {
			exceptionName = null;
		} else {
			var c = js_Boot.getClass(exception);
			exceptionName = c.__name__;
		}
		if(exceptionName == null) {
			exceptionName = "no exception";
		}
		var isCaught = js_Boot.__instanceof(exception,type);
		this.test(isCaught,p,"Expected " + this.quote(this.value) + " to throw type " + typeName + ", " + exceptionName + " was thrown instead","Expected " + this.quote(this.value) + " not to throw type " + typeName);
		return exception;
	}
	,be: function(expected,p) {
		this.test(this.value == expected,p,"Expected " + this.quote(expected) + ", was " + this.quote(this.value),"Didn't expect " + this.quote(expected) + " but was equal to that");
	}
	,quote: function(v) {
		if(typeof(v) == "string") {
			return "\"" + Std.string(v) + "\"";
		}
		if(((v) instanceof haxe_ds_List)) {
			return Std.string(Lambda.array(v));
		}
		return Std.string(v);
	}
	,test: function(expr,p,error,errorInverted) {
		if(buddy_SuitesRunner.currentTest == null) {
			throw haxe_Exception.thrown("SuitesRunner.currentTest was null");
		}
		if(!this.inverse) {
			var tmp = buddy_SuitesRunner.posInfosToStack(p);
			buddy_SuitesRunner.currentTest(expr,error,tmp);
		} else {
			var tmp = buddy_SuitesRunner.posInfosToStack(p);
			buddy_SuitesRunner.currentTest(!expr,errorInverted,tmp);
		}
	}
	,__class__: buddy_ShouldFunctions
};
var buddy_SuitesRunner = function(buddySuites,reporter) {
	this.allTestsPassed = false;
	this.unrecoverableErrorStack = null;
	this.unrecoverableError = null;
	this.buddySuites = buddySuites;
	this.reporter = reporter == null ? new buddy_reporting_ConsoleReporter() : reporter;
	this.oldLog = haxe_Log.trace;
	this.includeMode = Lambda.exists(buddySuites,function(suite) {
		var metaData = haxe_rtti_Meta.getType(js_Boot.getClass(suite));
		return Object.prototype.hasOwnProperty.call(metaData,"includeMode");
	});
};
buddy_SuitesRunner.__name__ = "buddy.SuitesRunner";
buddy_SuitesRunner.posInfosToStack = function(p) {
	if(p == null) {
		return [haxe_StackItem.FilePos(null,"",0)];
	} else {
		return [haxe_StackItem.FilePos(null,p.fileName,p.lineNumber)];
	}
};
buddy_SuitesRunner.prototype = {
	run: function() {
		var _gthis = this;
		this.runCompleted = new promhx_Deferred();
		var runCompletedPromise = this.runCompleted.promise();
		this.runDescribes(function(err) {
			if(err != null) {
				_gthis.haveUnrecoverableError(err);
				return;
			}
			if(_gthis.includeMode) {
				_gthis.startIncludeMode();
			}
			_gthis.startRun();
		});
		return runCompletedPromise;
	}
	,runDescribes: function(cb) {
		var _gthis = this;
		var asyncQueue = [];
		var syncQueue = [];
		var processSuiteDescribes = function(suite) {
			while(!Lambda.empty(suite.describeQueue)) {
				var current = suite.describeQueue.pop();
				var _g = current.spec;
				switch(_g._hx_index) {
				case 0:
					var f = _g.f;
					asyncQueue.push({ buddySuite : suite, testSuite : current.suite, run : f});
					break;
				case 1:
					var f1 = _g.f;
					syncQueue.push({ buddySuite : suite, testSuite : current.suite, run : f1});
					break;
				}
			}
		};
		var processBuddySuites = null;
		processBuddySuites = function() {
			var buddySuite = $getIterator(_gthis.buddySuites);
			while(buddySuite.hasNext()) {
				var buddySuite1 = buddySuite.next();
				processSuiteDescribes(buddySuite1);
			}
			if(syncQueue.length > 0) {
				try {
					var _g = 0;
					while(_g < syncQueue.length) {
						var test = syncQueue[_g];
						++_g;
						test.buddySuite.currentSuite = test.testSuite;
						test.run();
					}
				} catch( _g ) {
					haxe_NativeStackTrace.lastError = _g;
					var err = haxe_Exception.caught(_g).unwrap();
					cb(err);
					return;
				}
				syncQueue = [];
				processBuddySuites();
			} else if(asyncQueue.length > 0) {
				AsyncTools.aEachSeries(asyncQueue,function(test,cb) {
					test.buddySuite.currentSuite = test.testSuite;
					test.run(function() {
						cb(null);
					});
				},function(err) {
					if(err != null) {
						cb(err);
						return;
					}
					asyncQueue = [];
					processBuddySuites();
				});
			} else {
				cb(null);
			}
		};
		processBuddySuites();
	}
	,failed: function() {
		return !this.allTestsPassed;
	}
	,statusCode: function() {
		if(this.failed()) {
			return 1;
		} else {
			return 0;
		}
	}
	,startRun: function() {
		var _gthis = this;
		var r = this.reporter.start();
		r.then(function(go) {
			if(!go) {
				var r = _gthis.reporter.done([],false);
				r.then(function(_) {
					_gthis.runCompleted.resolve(_gthis);
				});
				return;
			}
			var beforeEachStack = [[]];
			var afterEachStack = [[]];
			AsyncTools.aMapSeries(_gthis.buddySuites,function(buddySuite,done) {
				var suiteDone = function(err,suite) {
					if(err == null && suite == null) {
						return;
					}
					if(err != null) {
						suite.error = err;
						suite.stack = haxe_CallStack.exceptionStack();
					}
					done(err,suite);
				};
				var syncSuite = _gthis.mapTestSuite(buddySuite,buddySuite.suite,beforeEachStack,afterEachStack,suiteDone);
				if(syncSuite != null) {
					suiteDone(syncSuite.error,syncSuite.suite);
				}
			},function(err,suites) {
				if(err != null) {
					_gthis.haveUnrecoverableError(err);
				} else {
					_gthis.allTestsPassed = !Lambda.exists(suites,function(suite) {
						return !suite.passed();
					});
					var r = _gthis.reporter.done(suites,_gthis.allTestsPassed);
					r.then(function(_) {
						_gthis.runCompleted.resolve(_gthis);
					});
				}
			});
		});
	}
	,startIncludeMode: function() {
		var traverse = null;
		traverse = function(suite) {
			suite.specs = suite.specs.filter(function(spec) {
				switch(spec._hx_index) {
				case 0:
					var included = spec.included;
					var suite = spec.suite;
					if(included) {
						return true;
					} else {
						return traverse(suite);
					}
					break;
				case 1:
					var _g = spec.time;
					var _g = spec.pos;
					var _g = spec.test;
					var included = spec.included;
					var desc = spec.description;
					return included;
				}
			});
			return suite.specs.length > 0;
		};
		this.buddySuites = Lambda.filter(this.buddySuites,function(buddySuite) {
			var suiteMeta = haxe_rtti_Meta.getType(js_Boot.getClass(buddySuite));
			if(Object.prototype.hasOwnProperty.call(suiteMeta,"include")) {
				return true;
			}
			return traverse(buddySuite.suite);
		});
	}
	,mapTestSuite: function(buddySuite,testSuite,beforeEachStack,afterEachStack,done) {
		var _gthis = this;
		var currentSuite = buddy_tests_SelfTest.lastSuite = new buddy_Suite(testSuite.description);
		beforeEachStack.push(Lambda.array(testSuite.beforeEach));
		afterEachStack.unshift(Lambda.array(testSuite.afterEach));
		var allSync = this.isSync(testSuite.beforeAll) && this.isSync(testSuite.afterAll);
		var result = null;
		var syncResultCount = 0;
		this.runTestFuncs(testSuite.beforeAll,function(err) {
			if(err != null) {
				if(_gthis.isSync(testSuite.beforeAll)) {
					result = { error : err, suite : currentSuite};
				} else {
					done(err,currentSuite);
				}
				return;
			}
			AsyncTools.aMapSeries(testSuite.specs,function(testSpec,cb) {
				var result2 = _gthis.mapTestSpec(buddySuite,testSuite,beforeEachStack,afterEachStack,testSpec,cb);
				if(result2 != null) {
					syncResultCount += 1;
					cb(result2.error,result2.step);
				}
			},function(err,testSteps) {
				allSync = allSync && testSteps.length == syncResultCount;
				if(err != null) {
					if(allSync) {
						result = { error : err, suite : currentSuite};
					} else {
						done(err,currentSuite);
					}
					return;
				}
				_gthis.runTestFuncs(testSuite.afterAll,function(err) {
					if(err != null) {
						if(allSync) {
							result = { error : err, suite : currentSuite};
						} else {
							done(err,currentSuite);
						}
						return;
					}
					currentSuite.steps = testSteps;
					beforeEachStack.pop();
					afterEachStack.shift();
					if(allSync) {
						result = { error : null, suite : currentSuite};
					} else {
						done(null,currentSuite);
					}
				});
			});
		});
		if(result != null) {
			done(null,null);
		}
		return result;
	}
	,runTestFuncs: function(funcs,done) {
		var syncQ = [];
		var asyncQ = [];
		var func = $getIterator(funcs);
		while(func.hasNext()) {
			var func1 = func.next();
			switch(func1._hx_index) {
			case 0:
				var f = func1.f;
				asyncQ.push(f);
				break;
			case 1:
				var f1 = func1.f;
				syncQ.push(f1);
				break;
			}
		}
		try {
			var _g = 0;
			while(_g < syncQ.length) {
				var f = syncQ[_g];
				++_g;
				f();
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var err = haxe_Exception.caught(_g).unwrap();
			done(err);
			return;
		}
		AsyncTools.aEachSeries(asyncQ,function(f,done) {
			f(function() {
				done();
			});
		},done);
	}
	,flatten: function(arr) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < arr.length) {
			var a = arr[_g1];
			++_g1;
			var _g2 = 0;
			while(_g2 < a.length) {
				var b = a[_g2];
				++_g2;
				_g.push(b);
			}
		}
		return _g;
	}
	,isSync: function(funcs) {
		var f = $getIterator(funcs);
		while(f.hasNext()) {
			var f1 = f.next();
			if(f1._hx_index == 0) {
				var _g = f1.f;
				return false;
			}
		}
		return true;
	}
	,mapTestSpec: function(buddySuite,testSuite,beforeEachStack,afterEachStack,testSpec,done) {
		var _gthis = this;
		var hasCompleted = false;
		var oldFail = null;
		oldFail = buddySuite.fail = function(err,p) {
			if(err == null) {
				err = "Exception";
			}
			if(!hasCompleted && oldFail == buddySuite.fail) {
				done(err,null);
			}
		};
		var oldPending = buddySuite.pending = function(message,p) {
			done("Cannot call pending here.",null);
		};
		switch(testSpec._hx_index) {
		case 0:
			var _g = testSpec.included;
			var testSuite = testSpec.suite;
			var result = this.mapTestSuite(buddySuite,testSuite,beforeEachStack,afterEachStack,function(err,newSuite) {
				if(err == null && newSuite == null) {
					return;
				}
				if(err != null) {
					done(err,null);
				} else {
					done(null,buddy_Step.TSuite(newSuite));
				}
			});
			if(result != null) {
				return { error : result.error, step : buddy_Step.TSuite(result.suite)};
			} else {
				return null;
			}
			break;
		case 1:
			var _g = testSpec.included;
			var time = testSpec.time;
			var pos = testSpec.pos;
			var test = testSpec.test;
			var desc = testSpec.description;
			var spec = buddy_tests_SelfTest.lastSpec = new buddy_Spec(desc,pos.fileName);
			var beforeEach = this.flatten(beforeEachStack);
			var afterEach = this.flatten(afterEachStack);
			var eachIsSync = this.isSync(beforeEach) && this.isSync(afterEach);
			var returnSync;
			if(test == null) {
				returnSync = eachIsSync;
			} else {
				switch(test._hx_index) {
				case 0:
					var _g = test.f;
					returnSync = false;
					break;
				case 1:
					var _g = test.f;
					returnSync = eachIsSync;
					break;
				}
			}
			if(!buddy_BuddySuite.useDefaultTrace) {
				haxe_Log.trace = function(v,pos) {
					if(pos == null) {
						spec.traces.push(Std.string(v));
					} else {
						var output;
						if(pos.customParams != null) {
							var output1 = Std.string(v) + ",";
							var _this = pos.customParams;
							var result = new Array(_this.length);
							var _g = 0;
							var _g1 = _this.length;
							while(_g < _g1) {
								var i = _g++;
								result[i] = Std.string(_this[i]);
							}
							output = output1 + result.join(",");
						} else {
							output = Std.string(v);
						}
						spec.traces.push(pos.fileName + ":" + pos.lineNumber + ": " + output);
					}
				};
			}
			var reportFailure = function(error,stack) {
				if(hasCompleted) {
					return;
				}
				spec.status = buddy_SpecStatus.Failed;
				spec.failures.push(new buddy_Failure(error,stack));
			};
			var specCompleted = function(status) {
				if(hasCompleted) {
					return null;
				}
				hasCompleted = true;
				if(spec.status == buddy_SpecStatus.Unknown) {
					spec.status = status;
				}
				if(!buddy_BuddySuite.useDefaultTrace) {
					haxe_Log.trace = _gthis.oldLog;
				}
				buddySuite.fail = oldFail;
				buddySuite.pending = oldPending;
				var syncResult = null;
				_gthis.runTestFuncs(afterEach,function(err) {
					if(returnSync) {
						syncResult = { error : err, step : err == null ? buddy_Step.TSpec(spec) : null};
						_gthis.reporter.progress(spec);
					} else if(err != null) {
						done(err,null);
					} else {
						var r = _gthis.reporter.progress(spec);
						r.then(function(_) {
							done(null,buddy_Step.TSpec(spec));
						});
					}
				});
				return syncResult;
			};
			if(test == null) {
				return specCompleted(buddy_SpecStatus.Pending);
			}
			buddy_SuitesRunner.currentTest = function(testStatus,error,stack) {
				if(testStatus != true) {
					reportFailure(error,stack);
				}
			};
			if(!returnSync && buddySuite.timeoutMs > 0) {
				var r = buddy_tools_AsyncTools.wait(buddySuite.timeoutMs);
				r.catchError(function(e) {
					reportFailure(e,haxe_CallStack.exceptionStack());
					specCompleted(buddy_SpecStatus.Failed);
				});
				r.then(function(_) {
					reportFailure("Timeout after " + buddySuite.timeoutMs + " ms",[]);
					specCompleted(buddy_SpecStatus.Failed);
				});
			}
			var _syncResult = null;
			var hrtime = process.hrtime();
			var _startTime = hrtime[0] + hrtime[1] / 1e9;
			var setSyncResult = function(status) {
				if(!returnSync || _syncResult != null) {
					return;
				}
				_syncResult = status;
				var hrtime = process.hrtime();
				spec.time = hrtime[0] + hrtime[1] / 1e9 - _startTime;
			};
			buddySuite.fail = function(err,p) {
				if(err == null) {
					err = "Manually";
				}
				reportFailure(err,buddy_SuitesRunner.posInfosToStack(p));
				setSyncResult(specCompleted(buddy_SpecStatus.Failed));
			};
			buddySuite.pending = function(message,p) {
				var msg = p.fileName + ":" + p.lineNumber + (message != null ? ": " + message : "");
				spec.traces.push(msg);
				setSyncResult(specCompleted(buddy_SpecStatus.Pending));
			};
			this.runTestFuncs(beforeEach,function(err) {
				if(err != null) {
					if(returnSync) {
						setSyncResult({ error : err, step : null});
					} else {
						done(err,null);
					}
					return;
				}
				var runTestFunc = function(func,done) {
					try {
						switch(func._hx_index) {
						case 0:
							var f = func.f;
							f(function() {
								done(null);
							});
							break;
						case 1:
							var f = func.f;
							f();
							done(null);
							break;
						}
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var e = haxe_Exception.caught(_g).unwrap();
						done(e);
					}
				};
				runTestFunc(test,function(err) {
					if(err != null) {
						reportFailure(err,haxe_CallStack.exceptionStack());
						setSyncResult(specCompleted(buddy_SpecStatus.Failed));
					} else {
						setSyncResult(specCompleted(buddy_SpecStatus.Passed));
					}
				});
			});
			return _syncResult;
		}
	}
	,haveUnrecoverableError: function(err) {
		this.unrecoverableError = err;
		this.unrecoverableErrorStack = haxe_CallStack.exceptionStack();
		this.runCompleted.resolve(this);
	}
	,__class__: buddy_SuitesRunner
};
var buddy_internal_sys_NodeJs = function() { };
buddy_internal_sys_NodeJs.__name__ = "buddy.internal.sys.NodeJs";
buddy_internal_sys_NodeJs.print = function(s) {
	process.stdout.write(s);
};
buddy_internal_sys_NodeJs.println = function(s) {
	console.log(s);
};
var buddy_reporting_Reporter = function() { };
buddy_reporting_Reporter.__name__ = "buddy.reporting.Reporter";
buddy_reporting_Reporter.__isInterface__ = true;
buddy_reporting_Reporter.prototype = {
	__class__: buddy_reporting_Reporter
};
var buddy_reporting_TraceReporter = function(colors) {
	if(colors == null) {
		colors = false;
	}
	this.colors = colors;
};
buddy_reporting_TraceReporter.__name__ = "buddy.reporting.TraceReporter";
buddy_reporting_TraceReporter.__interfaces__ = [buddy_reporting_Reporter];
buddy_reporting_TraceReporter.prototype = {
	start: function() {
		return this.resolveImmediately(true);
	}
	,progress: function(spec) {
		return this.resolveImmediately(spec);
	}
	,done: function(suites,status) {
		var _gthis = this;
		this.println("");
		var total = 0;
		var failures = 0;
		var pending = 0;
		var countTests = null;
		var printTests = null;
		countTests = function(s) {
			if(s.error != null) {
				failures += 1;
			}
			var _g = 0;
			var _g1 = s.steps;
			while(_g < _g1.length) {
				var sp = _g1[_g];
				++_g;
				switch(sp._hx_index) {
				case 0:
					var s = sp.s;
					countTests(s);
					break;
				case 1:
					var sp1 = sp.s;
					total += 1;
					if(sp1.status == buddy_SpecStatus.Failed) {
						failures += 1;
					} else if(sp1.status == buddy_SpecStatus.Pending) {
						pending += 1;
					}
					break;
				}
			}
		};
		Lambda.iter(suites,countTests);
		printTests = function(s,indentLevel) {
			var success = true;
			var lines = [];
			var print = function(str,color) {
				if(color == null) {
					color = 39;
				}
				var start = _gthis.strCol(color);
				var end = _gthis.strCol(39);
				lines.push(start + StringTools.lpad(str," ",str.length + (Math.max(0,indentLevel * 2) | 0)) + end);
			};
			var printStack = function(indent,stack) {
				if(stack == null || stack.length == 0) {
					return;
				}
				var _g = 0;
				while(_g < stack.length) {
					var s = stack[_g];
					++_g;
					if(s._hx_index == 2) {
						var _g1 = s.column;
						var _g2 = s.s;
						var line = s.line;
						var file = s.file;
						if(line > 0 && file.indexOf("buddy/internal/") != 0 && file.indexOf("buddy.SuitesRunner") != 0) {
							print(indent + ("@ " + file + ":" + line),33);
						}
					}
				}
			};
			var printTraces = function(spec) {
				var _g = 0;
				var _g1 = spec.traces;
				while(_g < _g1.length) {
					var t = _g1[_g];
					++_g;
					print("    " + t,33);
				}
			};
			if(s.description.length > 0) {
				print(s.description);
			}
			if(s.error != null) {
				print("ERROR: " + Std.string(s.error),31);
				printStack("  ",s.stack);
				return { success : false, lines : lines};
			}
			var _g = 0;
			var _g1 = s.steps;
			while(_g < _g1.length) {
				var step = _g1[_g];
				++_g;
				switch(step._hx_index) {
				case 0:
					var s = step.s;
					var ret = printTests(s,indentLevel + 1);
					success = success && ret.success;
					lines = lines.concat(ret.lines);
					break;
				case 1:
					var sp = step.s;
					success = success && sp.status == buddy_SpecStatus.Passed;
					if(sp.status == buddy_SpecStatus.Failed) {
						print("  " + sp.description + " (FAILED)",31);
						printTraces(sp);
						var _g2 = 0;
						var _g3 = sp.failures;
						while(_g2 < _g3.length) {
							var failure = _g3[_g2];
							++_g2;
							print("    " + Std.string(failure.error),33);
							printStack("      ",failure.stack);
						}
					} else {
						print("  " + sp.description + " (" + Std.string(sp.status) + ")",sp.status == buddy_SpecStatus.Passed ? 32 : 33);
						printTraces(sp);
					}
					break;
				}
			}
			return { success : success, lines : lines};
		};
		Lambda.iter(suites,function(s) {
			var ret = printTests(s,-1);
			Lambda.iter(ret.lines,$bind(_gthis,_gthis.println));
		});
		var totalColor = failures > 0 ? 31 : 32;
		var pendingColor = pending > 0 ? 33 : totalColor;
		this.println(this.strCol(totalColor) + ("" + total + " specs, " + failures + " failures, ") + this.strCol(pendingColor) + ("" + pending + " pending") + this.strCol(39));
		return this.resolveImmediately(suites);
	}
	,println: function(s) {
		haxe_Log.trace(s,{ fileName : "buddy/reporting/TraceReporter.hx", lineNumber : 159, className : "buddy.reporting.TraceReporter", methodName : "println"});
	}
	,strCol: function(color) {
		if(this.colors) {
			return buddy_reporting_Color.ansiCode(color);
		} else {
			return "";
		}
	}
	,resolveImmediately: function(o) {
		var def = new promhx_Deferred();
		var pr = def.promise();
		def.resolve(o);
		return pr;
	}
	,__class__: buddy_reporting_TraceReporter
};
var buddy_reporting_ConsoleReporter = function(colors) {
	if(colors == null) {
		colors = false;
	}
	this.progressString = "";
	buddy_reporting_TraceReporter.call(this,colors);
};
buddy_reporting_ConsoleReporter.__name__ = "buddy.reporting.ConsoleReporter";
buddy_reporting_ConsoleReporter.__super__ = buddy_reporting_TraceReporter;
buddy_reporting_ConsoleReporter.prototype = $extend(buddy_reporting_TraceReporter.prototype,{
	start: function() {
		return this.resolveImmediately(true);
	}
	,progress: function(spec) {
		var status;
		switch(spec.status._hx_index) {
		case 0:
			status = this.strCol(33) + "?";
			break;
		case 1:
			status = this.strCol(32) + ".";
			break;
		case 2:
			status = this.strCol(33) + "P";
			break;
		case 3:
			status = this.strCol(31) + "X";
			break;
		}
		this.progressString += status;
		this.print(status + this.strCol(39));
		return this.resolveImmediately(spec);
	}
	,done: function(suites,status) {
		var output = buddy_reporting_TraceReporter.prototype.done.call(this,suites,status);
		return output;
	}
	,print: function(s) {
		buddy_internal_sys_NodeJs.print(s);
	}
	,println: function(s) {
		buddy_internal_sys_NodeJs.println(s);
	}
	,__class__: buddy_reporting_ConsoleReporter
});
var buddy_reporting_ConsoleColorReporter = function(colors) {
	if(colors == null) {
		colors = true;
	}
	buddy_reporting_ConsoleReporter.call(this,colors);
};
buddy_reporting_ConsoleColorReporter.__name__ = "buddy.reporting.ConsoleColorReporter";
buddy_reporting_ConsoleColorReporter.__super__ = buddy_reporting_ConsoleReporter;
buddy_reporting_ConsoleColorReporter.prototype = $extend(buddy_reporting_ConsoleReporter.prototype,{
	__class__: buddy_reporting_ConsoleColorReporter
});
var buddy_reporting_Color = {};
buddy_reporting_Color.ansiCode = function(this1) {
	return "\x1B" + ("[" + this1 + "m");
};
var buddy_tests_SelfTest = function() { };
buddy_tests_SelfTest.__name__ = "buddy.tests.SelfTest";
var buddy_tools_AsyncTools = function() { };
buddy_tools_AsyncTools.__name__ = "buddy.tools.AsyncTools";
buddy_tools_AsyncTools.wait = function(ms) {
	var def = new promhx_Deferred();
	var pr = def.promise();
	var done = function() {
		if(!pr._fulfilled) {
			def.resolve(true);
		}
	};
	haxe_Timer.delay(function() {
		done();
	},ms);
	return pr;
};
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function() {
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m1 = item1.m;
				var m2 = item2.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item11 = item1.s;
				var file1 = item1.file;
				var line1 = item1.line;
				var col1 = item1.column;
				var col2 = item2.column;
				var line2 = item2.line;
				var file2 = item2.file;
				var item21 = item2.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class1 = item1.classname;
				var method1 = item1.method;
				var method2 = item2.method;
				var class2 = item2.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v1 = item1.v;
				var v2 = item2.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var col = s.column;
		var line = s.line;
		var file = s.file;
		var s1 = s.s;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s.method;
		var cname = s.classname;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Int32 = {};
haxe_Int32.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_ds_List = function() {
	this.length = 0;
};
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,filter: function(f) {
		var l2 = new haxe_ds_List();
		var l = this.h;
		while(l != null) {
			var v = l.item;
			l = l.next;
			if(f(v)) {
				l2.add(v);
			}
		}
		return l2;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_rtti_Meta = function() { };
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var promhx_base_AsyncBase = function(d) {
	this._resolved = false;
	this._pending = false;
	this._errorPending = false;
	this._fulfilled = false;
	this._update = [];
	this._error = [];
	this._errored = false;
	if(d != null) {
		var next = this;
		var f = function(x) {
			return x;
		};
		d._update.push({ async : next, linkf : function(x) {
			next.handleResolve(f(x));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(d,next,f);
	}
};
promhx_base_AsyncBase.__name__ = "promhx.base.AsyncBase";
promhx_base_AsyncBase.immediateLinkUpdate = function(current,next,f) {
	if(current._errored && !current._errorPending && current._error.length <= 0) {
		next.handleError(current._errorVal);
	}
	if(current._resolved && !current._pending) {
		try {
			next.handleResolve(f(current._val));
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			next.handleError(e);
		}
	}
};
promhx_base_AsyncBase.allFulfilled = function(as) {
	var a = $getIterator(as);
	while(a.hasNext()) {
		var a1 = a.next();
		if(!a1._fulfilled) {
			return false;
		}
	}
	return true;
};
promhx_base_AsyncBase.prototype = {
	catchError: function(f) {
		this._error.push(f);
		return this;
	}
	,handleResolve: function(val) {
		this._resolve(val);
	}
	,_resolve: function(val) {
		var _gthis = this;
		if(this._pending) {
			var _g = $bind(this,this._resolve);
			var val1 = val;
			var tmp = function() {
				_g(val1);
			};
			promhx_base_EventLoop.queue.add(tmp);
			promhx_base_EventLoop.continueOnNextLoop();
		} else {
			this._resolved = true;
			this._pending = true;
			promhx_base_EventLoop.queue.add(function() {
				_gthis._val = val;
				var _g = 0;
				var _g1 = _gthis._update;
				while(_g < _g1.length) {
					var up = _g1[_g];
					++_g;
					try {
						up.linkf(val);
					} catch( _g2 ) {
						haxe_NativeStackTrace.lastError = _g2;
						var e = haxe_Exception.caught(_g2).unwrap();
						up.async.handleError(e);
					}
				}
				_gthis._fulfilled = true;
				_gthis._pending = false;
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,handleError: function(error) {
		this._handleError(error);
	}
	,_handleError: function(error) {
		var _gthis = this;
		var update_errors = function(e) {
			if(_gthis._error.length > 0) {
				var _g = 0;
				var _g1 = _gthis._error;
				while(_g < _g1.length) {
					var ef = _g1[_g];
					++_g;
					ef(e);
				}
			} else if(_gthis._update.length > 0) {
				var _g = 0;
				var _g1 = _gthis._update;
				while(_g < _g1.length) {
					var up = _g1[_g];
					++_g;
					up.async.handleError(e);
				}
			} else {
				haxe_Log.trace("Call Stack: " + haxe_CallStack.toString(haxe_CallStack.callStack()),{ fileName : "promhx/base/AsyncBase.hx", lineNumber : 192, className : "promhx.base.AsyncBase", methodName : "_handleError"});
				throw haxe_Exception.thrown(e);
			}
			_gthis._errorPending = false;
		};
		if(!this._errorPending) {
			this._errorPending = true;
			this._errored = true;
			this._errorVal = error;
			promhx_base_EventLoop.queue.add(function() {
				if(_gthis._errorMap != null) {
					try {
						_gthis._resolve(_gthis._errorMap(error));
					} catch( _g ) {
						haxe_NativeStackTrace.lastError = _g;
						var e = haxe_Exception.caught(_g).unwrap();
						update_errors(e);
					}
				} else {
					update_errors(error);
				}
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,__class__: promhx_base_AsyncBase
};
var promhx_Deferred = $hx_exports["promhx"]["Deferred"] = function() {
	promhx_base_AsyncBase.call(this);
};
promhx_Deferred.__name__ = "promhx.Deferred";
promhx_Deferred.__super__ = promhx_base_AsyncBase;
promhx_Deferred.prototype = $extend(promhx_base_AsyncBase.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,promise: function() {
		return new promhx_Promise(this);
	}
	,stream: function() {
		return new promhx_Stream(this);
	}
	,publicStream: function() {
		return new promhx_PublicStream(this);
	}
	,__class__: promhx_Deferred
});
var promhx_Promise = $hx_exports["promhx"]["Promise"] = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._rejected = false;
};
promhx_Promise.__name__ = "promhx.Promise";
promhx_Promise.whenAll = function(itb) {
	var ret = new promhx_Promise(null);
	var all = itb;
	var next = ret;
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var a = $getIterator(all);
			while(a.hasNext()) {
				var a1 = a.next();
				_g.push(a1 == current ? v : a1._val);
			}
			var vals = _g;
			next.handleResolve(vals);
		}
	};
	var a = $getIterator(all);
	while(a.hasNext()) {
		var a1 = a.next();
		var a2 = a1._update;
		var next1 = next;
		var _g = [cthen];
		var _g1 = [];
		var a21 = $getIterator(all);
		while(a21.hasNext()) {
			var a22 = a21.next();
			if(a22 != a1) {
				_g1.push(a22);
			}
		}
		a2.push({ async : next1, linkf : (function(current,arr,_g) {
			return function(v) {
				_g[0](arr[0],current[0],v);
			};
		})([a1],[_g1],_g)});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var next1 = next;
		var _g1 = [];
		var a = $getIterator(all);
		while(a.hasNext()) {
			var a1 = a.next();
			_g1.push(a1._val);
		}
		next1.handleResolve(_g1);
	}
	return ret;
};
promhx_Promise.promise = function(_val) {
	var ret = new promhx_Promise();
	ret.handleResolve(_val);
	return ret;
};
promhx_Promise.__super__ = promhx_base_AsyncBase;
promhx_Promise.prototype = $extend(promhx_base_AsyncBase.prototype,{
	isRejected: function() {
		return this._rejected;
	}
	,reject: function(e) {
		this._rejected = true;
		this.handleError(e);
	}
	,handleResolve: function(val) {
		if(this._resolved) {
			var msg = "Promise has already been resolved";
			throw haxe_Exception.thrown(promhx_error_PromiseError.AlreadyResolved(msg));
		}
		this._resolve(val);
	}
	,then: function(f) {
		var ret = new promhx_Promise(null);
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			next.handleResolve(f1(x));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		return ret;
	}
	,unlink: function(to) {
		var _gthis = this;
		promhx_base_EventLoop.queue.add(function() {
			if(!_gthis._fulfilled) {
				var msg = "Downstream Promise is not fullfilled";
				_gthis.handleError(promhx_error_PromiseError.DownstreamNotFullfilled(msg));
			} else {
				var _g = [];
				var _g1 = 0;
				var _g2 = _gthis._update;
				while(_g1 < _g2.length) {
					var v = _g2[_g1];
					++_g1;
					if(v.async != to) {
						_g.push(v);
					}
				}
				_gthis._update = _g;
			}
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,handleError: function(error) {
		this._rejected = true;
		this._handleError(error);
	}
	,pipe: function(f) {
		var ret = new promhx_Promise(null);
		var ret1 = ret;
		var f1 = f;
		var linked = false;
		var linkf = function(x) {
			if(!linked) {
				linked = true;
				var pipe_ret = f1(x);
				pipe_ret._update.push({ async : ret1, linkf : $bind(ret1,ret1.handleResolve)});
				promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret1,function(x) {
					return x;
				});
			}
		};
		this._update.push({ async : ret1, linkf : linkf});
		if(this._resolved && !this._pending) {
			try {
				linkf(this._val);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				ret1.handleError(e);
			}
		}
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Promise();
		this.catchError(function(e) {
			var piped = f(e);
			piped.then($bind(ret,ret._resolve));
		});
		this.then($bind(ret,ret._resolve));
		return ret;
	}
	,__class__: promhx_Promise
});
var promhx_Stream = $hx_exports["promhx"]["Stream"] = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._end_promise = new promhx_Promise();
};
promhx_Stream.__name__ = "promhx.Stream";
promhx_Stream.foreach = function(itb) {
	var s = new promhx_Stream(null);
	var i = $getIterator(itb);
	while(i.hasNext()) {
		var i1 = i.next();
		s.handleResolve(i1);
	}
	s.end();
	return s;
};
promhx_Stream.wheneverAll = function(itb) {
	var ret = new promhx_Stream(null);
	var all = itb;
	var next = ret;
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var a = $getIterator(all);
			while(a.hasNext()) {
				var a1 = a.next();
				_g.push(a1 == current ? v : a1._val);
			}
			var vals = _g;
			next.handleResolve(vals);
		}
	};
	var a = $getIterator(all);
	while(a.hasNext()) {
		var a1 = a.next();
		var a2 = a1._update;
		var next1 = next;
		var _g = [cthen];
		var _g1 = [];
		var a21 = $getIterator(all);
		while(a21.hasNext()) {
			var a22 = a21.next();
			if(a22 != a1) {
				_g1.push(a22);
			}
		}
		a2.push({ async : next1, linkf : (function(current,arr,_g) {
			return function(v) {
				_g[0](arr[0],current[0],v);
			};
		})([a1],[_g1],_g)});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var next1 = next;
		var _g1 = [];
		var a = $getIterator(all);
		while(a.hasNext()) {
			var a1 = a.next();
			_g1.push(a1._val);
		}
		next1.handleResolve(_g1);
	}
	return ret;
};
promhx_Stream.concatAll = function(itb) {
	var ret = new promhx_Stream(null);
	var i = $getIterator(itb);
	while(i.hasNext()) {
		var i1 = i.next();
		ret.concat(i1);
	}
	return ret;
};
promhx_Stream.mergeAll = function(itb) {
	var ret = new promhx_Stream(null);
	var i = $getIterator(itb);
	while(i.hasNext()) {
		var i1 = i.next();
		ret.merge(i1);
	}
	return ret;
};
promhx_Stream.stream = function(_val) {
	var ret = new promhx_Stream(null);
	ret.handleResolve(_val);
	return ret;
};
promhx_Stream.__super__ = promhx_base_AsyncBase;
promhx_Stream.prototype = $extend(promhx_base_AsyncBase.prototype,{
	then: function(f) {
		var ret = new promhx_Stream(null);
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			next.handleResolve(f1(x));
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		this._end_promise._update.push({ async : ret._end_promise, linkf : function(x) {
			ret.end();
		}});
		return ret;
	}
	,detachStream: function(str) {
		var filtered = [];
		var removed = false;
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.async == str) {
				var _g2 = [];
				var _g3 = 0;
				var _g4 = this._end_promise._update;
				while(_g3 < _g4.length) {
					var v = _g4[_g3];
					++_g3;
					if(v.async != str._end_promise) {
						_g2.push(v);
					}
				}
				this._end_promise._update = _g2;
				removed = true;
			} else {
				filtered.push(u);
			}
		}
		this._update = filtered;
		return removed;
	}
	,first: function() {
		var s = new promhx_Promise(null);
		this.then(function(x) {
			if(!s._resolved) {
				s.handleResolve(x);
			}
		});
		return s;
	}
	,handleResolve: function(val) {
		if(!this._end && !this._pause) {
			this._resolve(val);
		}
	}
	,pause: function(set) {
		if(set == null) {
			set = !this._pause;
		}
		this._pause = set;
	}
	,pipe: function(f) {
		var ret = new promhx_Stream(null);
		var ret1 = ret;
		var f1 = f;
		var linked = false;
		var linkf = function(x) {
			if(!linked) {
				linked = true;
				var pipe_ret = f1(x);
				pipe_ret._update.push({ async : ret1, linkf : $bind(ret1,ret1.handleResolve)});
				promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret1,function(x) {
					return x;
				});
			}
		};
		this._update.push({ async : ret1, linkf : linkf});
		if(this._resolved && !this._pending) {
			try {
				linkf(this._val);
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				ret1.handleError(e);
			}
		}
		this._end_promise.then(function(x) {
			ret.end();
		});
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Stream(null);
		this.catchError(function(e) {
			var piped = f(e);
			piped.then($bind(ret,ret._resolve));
			piped._end_promise.then(($_=ret._end_promise,$bind($_,$_._resolve)));
		});
		this.then($bind(ret,ret._resolve));
		this._end_promise.then(function(x) {
			ret.end();
		});
		return ret;
	}
	,handleEnd: function() {
		if(this._pending) {
			promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
			promhx_base_EventLoop.continueOnNextLoop();
		} else if(this._end_promise._resolved) {
			return;
		} else {
			this._end = true;
			var o = this._resolved ? haxe_ds_Option.Some(this._val) : haxe_ds_Option.None;
			this._end_promise.handleResolve(o);
			this._update = [];
			this._error = [];
		}
	}
	,end: function() {
		promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
		promhx_base_EventLoop.continueOnNextLoop();
		return this;
	}
	,endThen: function(f) {
		return this._end_promise.then(f);
	}
	,filter: function(f) {
		var ret = new promhx_Stream(null);
		this._update.push({ async : ret, linkf : function(x) {
			if(f(x)) {
				ret.handleResolve(x);
			}
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		return ret;
	}
	,concat: function(s) {
		var ret = new promhx_Stream(null);
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		this._end_promise.then(function(_) {
			s.pipe(function(x) {
				ret.handleResolve(x);
				return ret;
			});
			s._end_promise.then(function(_) {
				ret.end();
			});
		});
		return ret;
	}
	,merge: function(s) {
		var ret = new promhx_Stream(null);
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		s._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		promhx_base_AsyncBase.immediateLinkUpdate(s,ret,function(x) {
			return x;
		});
		return ret;
	}
	,__class__: promhx_Stream
});
var promhx_PublicStream = $hx_exports["promhx"]["PublicStream"] = function(def) {
	promhx_Stream.call(this,def);
};
promhx_PublicStream.__name__ = "promhx.PublicStream";
promhx_PublicStream.publicstream = function(val) {
	var ps = new promhx_PublicStream(null);
	ps.handleResolve(val);
	return ps;
};
promhx_PublicStream.__super__ = promhx_Stream;
promhx_PublicStream.prototype = $extend(promhx_Stream.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,update: function(val) {
		this.handleResolve(val);
	}
	,__class__: promhx_PublicStream
});
var promhx_base_EventLoop = function() { };
promhx_base_EventLoop.__name__ = "promhx.base.EventLoop";
promhx_base_EventLoop.f = function() {
	var fn = promhx_base_EventLoop.queue.pop();
	if(fn != null) {
		fn();
	}
	if(!promhx_base_EventLoop.queue.isEmpty()) {
		promhx_base_EventLoop.continueOnNextLoop();
	}
};
promhx_base_EventLoop.continueOnNextLoop = function() {
	if(promhx_base_EventLoop.nextLoop != null) {
		promhx_base_EventLoop.nextLoop(promhx_base_EventLoop.f);
	} else {
		setImmediate(promhx_base_EventLoop.f);
	}
};
var promhx_error_PromiseError = $hxEnums["promhx.error.PromiseError"] = { __ename__ : true, __constructs__ : ["AlreadyResolved","DownstreamNotFullfilled"]
	,AlreadyResolved: ($_=function(message) { return {_hx_index:0,message:message,__enum__:"promhx.error.PromiseError",toString:$estr}; },$_.__params__ = ["message"],$_)
	,DownstreamNotFullfilled: ($_=function(message) { return {_hx_index:1,message:message,__enum__:"promhx.error.PromiseError",toString:$estr}; },$_.__params__ = ["message"],$_)
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
buddy_BuddySuite.useDefaultTrace = false;
buddy_tests_SelfTest.lastSpec = new buddy_Spec("No spec","No filename");
buddy_tests_SelfTest.lastSuite = new buddy_Suite("No suite");
promhx_base_EventLoop.queue = new haxe_ds_List();
Tests.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
